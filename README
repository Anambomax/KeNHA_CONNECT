##KeNHA_Connect
 KeNHA faces delays and inefficiencies in handling public feedback due to lack of a centralized and transparent system.

 KeNHA_Connect solves this by enabling structured submission, assignment, and tracking of road-related incidents.

 It is a web-based platform for citizens to report issues and for Kenha staff to manage and respond with accountability.

 📁 Project Structure

 kenha-connect/
├── public/ # User-facing UI
│ ├── css/ # Styling
│ ├── js/ # JavaScript (e.g., Axios)
│ ├── uploads/ # Logo, background, and user uploads
│ ├── index.php # Login page
│ ├── register.php # Registration page
│ ├── dashboard.php # Main user dashboard
│ ├── report.php # Incident submission form
│ ├── profile.php # User profile (coming soon)
│ └── public_channel.php # View public updates (coming soon)

├── api/ # Backend logic (PHP API)
│ ├── config.php # Database connection
│ ├── login.php # User login handler
│ ├── register.php # User registration logic
│ ├── logout.php # Session logout
│ ├── add_incident.php # Report submission API (coming soon)
│ ├── get_incidents.php # Fetch incidents (coming soon)
│ ├── get_user.php # Fetch user details
│ └── public_channel.php # Public feed logic (planned)

├── admin/ # KeNHA Admin Dashboard (Phase 2)
│ ├── login.php
│ ├── dashboard.php
│ ├── users.php
│ ├── incidents.php
│ ├── resolved_issues.php
│ └── .htaccess # Access control

└── db.sql # MySQL database structure


 ✅ Features (Completed So Far)

- ✅ User registration with validation and county dropdown  
- ✅ Secure login with session management  
- ✅ KeNHA-themed UI with logo, background, and responsive design  
- ✅ Session-protected dashboard  
- ✅ Clean backend logic using PDO and password hashing  
- ✅ Organized folder structure with separation of concerns



🛠️ Setup Instructions

 Requirements
- XAMPP or any local PHP server
- PHP 7.4+
- MySQL or MariaDB
- Git (optional)

kenha-connect.sql

-- 1. USERS TABLE
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  county VARCHAR(100),
  role ENUM('user', 'staff', 'admin') DEFAULT 'user',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. FEEDBACK TABLE
CREATE TABLE feedback (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_name VARCHAR(100),
  county VARCHAR(100),
  feedback_category VARCHAR(50),
  feedback_subcategory VARCHAR(50),
  details VARCHAR(50) DEFAULT NULL,
  description TEXT,
  photo VARCHAR(255) DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. DEPARTMENTS TABLE
CREATE TABLE departments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT
);

-- 4. STAFF TABLE
CREATE TABLE staff (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  department INT,
  role VARCHAR(50),
  FOREIGN KEY (department) REFERENCES departments(id)
);

-- 5. COMMENTS TABLE
CREATE TABLE comments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  feedback INT NOT NULL,
  user INT NOT NULL,
  comment TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (feedback) REFERENCES feedback(id),
  FOREIGN KEY (user) REFERENCES users(id)
);

-- 6. REACTIONS TABLE
CREATE TABLE reactions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user INT NOT NULL,
  feedback INT NOT NULL,
  type ENUM('like', 'dislike', 'star') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (user, feedback, type),
  FOREIGN KEY (user) REFERENCES users(id),
  FOREIGN KEY (feedback) REFERENCES feedback(id)
);

-- 7. NOTIFICATIONS TABLE
CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user INT NOT NULL,
  message TEXT NOT NULL,
  is_read BOOLEAN DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user) REFERENCES users(id)
);

-- 8. LOGS TABLE
CREATE TABLE logs (
  id INT AUTO_INCREMENT PRIMARY KEY,
  actor VARCHAR(100) NOT NULL,
  action TEXT NOT NULL,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
